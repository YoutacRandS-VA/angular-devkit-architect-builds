"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuilderVersionSymbol = exports.BuilderSymbol = void 0;
// Internal types that should not be exported directly. These are used by the host and architect
// itself. Host implementations should import the host.ts file.
/**
 * BuilderSymbol used for knowing if a function was created using createBuilder(). This is a
 * property set on the function that should be `true`.
 * Using Symbol.for() as it's a global registry that's the same for all installations of
 * Architect (if some libraries depends directly on architect instead of sharing the files).
 */
exports.BuilderSymbol = Symbol.for('@angular-devkit/architect:builder');
/**
 * BuilderVersionSymbol used for knowing which version of the library createBuilder() came from.
 * This is to make sure we don't try to use an incompatible builder.
 * Using Symbol.for() as it's a global registry that's the same for all installations of
 * Architect (if some libraries depends directly on architect instead of sharing the files).
 */
exports.BuilderVersionSymbol = Symbol.for('@angular-devkit/architect:version');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9hcmNoaXRlY3Qvc3JjL2ludGVybmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUtILGdHQUFnRztBQUNoRywrREFBK0Q7QUFFL0Q7Ozs7O0dBS0c7QUFDVSxRQUFBLGFBQWEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFFN0U7Ozs7O0dBS0c7QUFDVSxRQUFBLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBleHBlcmltZW50YWwsIGpzb24gfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBCdWlsZGVySW5mbywgQnVpbGRlcklucHV0LCBCdWlsZGVyT3V0cHV0LCBUYXJnZXQgfSBmcm9tICcuL2FwaSc7XG5cbi8vIEludGVybmFsIHR5cGVzIHRoYXQgc2hvdWxkIG5vdCBiZSBleHBvcnRlZCBkaXJlY3RseS4gVGhlc2UgYXJlIHVzZWQgYnkgdGhlIGhvc3QgYW5kIGFyY2hpdGVjdFxuLy8gaXRzZWxmLiBIb3N0IGltcGxlbWVudGF0aW9ucyBzaG91bGQgaW1wb3J0IHRoZSBob3N0LnRzIGZpbGUuXG5cbi8qKlxuICogQnVpbGRlclN5bWJvbCB1c2VkIGZvciBrbm93aW5nIGlmIGEgZnVuY3Rpb24gd2FzIGNyZWF0ZWQgdXNpbmcgY3JlYXRlQnVpbGRlcigpLiBUaGlzIGlzIGFcbiAqIHByb3BlcnR5IHNldCBvbiB0aGUgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgYHRydWVgLlxuICogVXNpbmcgU3ltYm9sLmZvcigpIGFzIGl0J3MgYSBnbG9iYWwgcmVnaXN0cnkgdGhhdCdzIHRoZSBzYW1lIGZvciBhbGwgaW5zdGFsbGF0aW9ucyBvZlxuICogQXJjaGl0ZWN0IChpZiBzb21lIGxpYnJhcmllcyBkZXBlbmRzIGRpcmVjdGx5IG9uIGFyY2hpdGVjdCBpbnN0ZWFkIG9mIHNoYXJpbmcgdGhlIGZpbGVzKS5cbiAqL1xuZXhwb3J0IGNvbnN0IEJ1aWxkZXJTeW1ib2wgPSBTeW1ib2wuZm9yKCdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0OmJ1aWxkZXInKTtcblxuLyoqXG4gKiBCdWlsZGVyVmVyc2lvblN5bWJvbCB1c2VkIGZvciBrbm93aW5nIHdoaWNoIHZlcnNpb24gb2YgdGhlIGxpYnJhcnkgY3JlYXRlQnVpbGRlcigpIGNhbWUgZnJvbS5cbiAqIFRoaXMgaXMgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHRyeSB0byB1c2UgYW4gaW5jb21wYXRpYmxlIGJ1aWxkZXIuXG4gKiBVc2luZyBTeW1ib2wuZm9yKCkgYXMgaXQncyBhIGdsb2JhbCByZWdpc3RyeSB0aGF0J3MgdGhlIHNhbWUgZm9yIGFsbCBpbnN0YWxsYXRpb25zIG9mXG4gKiBBcmNoaXRlY3QgKGlmIHNvbWUgbGlicmFyaWVzIGRlcGVuZHMgZGlyZWN0bHkgb24gYXJjaGl0ZWN0IGluc3RlYWQgb2Ygc2hhcmluZyB0aGUgZmlsZXMpLlxuICovXG5leHBvcnQgY29uc3QgQnVpbGRlclZlcnNpb25TeW1ib2wgPSBTeW1ib2wuZm9yKCdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0OnZlcnNpb24nKTtcblxuLyoqXG4gKiBBIFNwZWNpYWxpemF0aW9uIG9mIHRoZSBKb2JIYW5kbGVyIHR5cGUuIFRoaXMgZXhwb3NlcyBCdWlsZGVyRGVzY3JpcHRpb24gYXMgdGhlIGpvYiBkZXNjcmlwdGlvblxuICogdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgQnVpbGRlckpvYkhhbmRsZXI8XG4gIEEgZXh0ZW5kcyBqc29uLkpzb25PYmplY3QgPSBqc29uLkpzb25PYmplY3QsXG4gIEkgZXh0ZW5kcyBCdWlsZGVySW5wdXQgPSBCdWlsZGVySW5wdXQsXG4gIE8gZXh0ZW5kcyBCdWlsZGVyT3V0cHV0ID0gQnVpbGRlck91dHB1dFxuPiA9IGV4cGVyaW1lbnRhbC5qb2JzLkpvYkhhbmRsZXI8QSwgSSwgTz4gJiB7IGpvYkRlc2NyaXB0aW9uOiBCdWlsZGVyRGVzY3JpcHRpb24gfTtcblxuLyoqXG4gKiBBIEJ1aWxkZXIgZGVzY3JpcHRpb24sIHdoaWNoIGlzIHVzZWQgaW50ZXJuYWxseS4gQWRkcyB0aGUgYnVpbGRlciBpbmZvIHdoaWNoIGlzIHRoZVxuICogbWV0YWRhdGEgYXR0YWNoZWQgdG8gYSBidWlsZGVyIGluIEFyY2hpdGVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWlsZGVyRGVzY3JpcHRpb24gZXh0ZW5kcyBleHBlcmltZW50YWwuam9icy5Kb2JEZXNjcmlwdGlvbiB7XG4gIGluZm86IEJ1aWxkZXJJbmZvO1xufVxuXG4vKipcbiAqIEEgQnVpbGRlciBpbnN0YW5jZS4gVXNlIGNyZWF0ZUJ1aWxkZXIoKSB0byBjcmVhdGUgb25lIG9mIHRoZXNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkZXI8T3B0aW9uVCBleHRlbmRzIGpzb24uSnNvbk9iamVjdCA9IGpzb24uSnNvbk9iamVjdD4ge1xuICAvLyBBIGZ1bGx5IGNvbXBhdGlibGUgam9iIGhhbmRsZXIuXG4gIGhhbmRsZXI6IGV4cGVyaW1lbnRhbC5qb2JzLkpvYkhhbmRsZXI8anNvbi5Kc29uT2JqZWN0LCBCdWlsZGVySW5wdXQsIEJ1aWxkZXJPdXRwdXQ+O1xuXG4gIC8vIE1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGJ1aWxkZXIuXG4gIFtCdWlsZGVyU3ltYm9sXTogdHJ1ZTtcbiAgW0J1aWxkZXJWZXJzaW9uU3ltYm9sXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFyY2hpdGVjdEhvc3Q8QnVpbGRlckluZm9UIGV4dGVuZHMgQnVpbGRlckluZm8gPSBCdWlsZGVySW5mbz4ge1xuICAvKipcbiAgICogR2V0IHRoZSBidWlsZGVyIG5hbWUgZm9yIGEgdGFyZ2V0LlxuICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gaW5zcGVjdC5cbiAgICovXG4gIGdldEJ1aWxkZXJOYW1lRm9yVGFyZ2V0KHRhcmdldDogVGFyZ2V0KTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPjtcblxuICAvKipcbiAgICogUmVzb2x2ZSBhIGJ1aWxkZXIuIFRoaXMgbmVlZHMgdG8gcmV0dXJuIGEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBhIGR5bmFtaWMgYGltcG9ydCgpYFxuICAgKiBjbGF1c2UuIFRoaXMgc2hvdWxkIHRocm93IGlmIG5vIGJ1aWxkZXIgY2FuIGJlIGZvdW5kLiBUaGUgZHluYW1pYyBpbXBvcnQgd2lsbCB0aHJvdyBpZlxuICAgKiBpdCBpcyB1bnN1cHBvcnRlZC5cbiAgICogQHBhcmFtIGJ1aWxkZXJOYW1lIFRoZSBuYW1lIG9mIHRoZSBidWlsZGVyIHRvIGJlIHVzZWQuXG4gICAqIEByZXR1cm5zIEFsbCB0aGUgaW5mbyBuZWVkZWQgZm9yIHRoZSBidWlsZGVyIGl0c2VsZi5cbiAgICovXG4gIHJlc29sdmVCdWlsZGVyKGJ1aWxkZXJOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEJ1aWxkZXJJbmZvVCB8IG51bGw+O1xuICBsb2FkQnVpbGRlcihpbmZvOiBCdWlsZGVySW5mb1QpOiBQcm9taXNlPEJ1aWxkZXIgfCBudWxsPjtcblxuICBnZXRDdXJyZW50RGlyZWN0b3J5KCk6IFByb21pc2U8c3RyaW5nPjtcbiAgZ2V0V29ya3NwYWNlUm9vdCgpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgZ2V0T3B0aW9uc0ZvclRhcmdldCh0YXJnZXQ6IFRhcmdldCk6IFByb21pc2U8anNvbi5Kc29uT2JqZWN0IHwgbnVsbD47XG5cbiAgZ2V0UHJvamVjdE1ldGFkYXRhKHByb2plY3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPGpzb24uSnNvbk9iamVjdCB8IG51bGw+O1xuICBnZXRQcm9qZWN0TWV0YWRhdGEodGFyZ2V0OiBUYXJnZXQpOiBQcm9taXNlPGpzb24uSnNvbk9iamVjdCB8IG51bGw+O1xufVxuIl19