"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.scheduleByTarget = exports.scheduleByName = void 0;
const core_1 = require("@angular-devkit/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const api_1 = require("./api");
const jobs_1 = require("./jobs");
const progressSchema = require('./progress-schema.json');
let _uniqueId = 0;
async function scheduleByName(name, buildOptions, options) {
    const childLoggerName = options.target ? `{${(0, api_1.targetStringFromTarget)(options.target)}}` : name;
    const logger = options.logger.createChild(childLoggerName);
    const job = options.scheduler.schedule(name, {});
    let stateSubscription;
    const workspaceRoot = await options.workspaceRoot;
    const currentDirectory = await options.currentDirectory;
    const description = await job.description.toPromise();
    const info = description.info;
    const id = ++_uniqueId;
    const message = {
        id,
        currentDirectory,
        workspaceRoot,
        info: info,
        options: buildOptions,
        ...(options.target ? { target: options.target } : {}),
    };
    // Wait for the job to be ready.
    if (job.state !== jobs_1.JobState.Started) {
        stateSubscription = job.outboundBus.subscribe((event) => {
            if (event.kind === jobs_1.JobOutboundMessageKind.Start) {
                job.input.next(message);
            }
        }, () => { });
    }
    else {
        job.input.next(message);
    }
    const logChannelSub = job.getChannel('log').subscribe((entry) => {
        logger.next(entry);
    }, () => { });
    const s = job.outboundBus.subscribe({
        error() { },
        complete() {
            s.unsubscribe();
            logChannelSub.unsubscribe();
            if (stateSubscription) {
                stateSubscription.unsubscribe();
            }
        },
    });
    const output = job.output.pipe((0, operators_1.map)((output) => ({
        ...output,
        ...(options.target ? { target: options.target } : 0),
        info,
    })), (0, operators_1.shareReplay)());
    // If there's an analytics object, take the job channel and report it to the analytics.
    if (options.analytics) {
        const reporter = new core_1.analytics.AnalyticsReporter(options.analytics);
        job
            .getChannel('analytics')
            .subscribe((report) => reporter.report(report));
    }
    // Start the builder.
    output.pipe((0, operators_1.first)()).subscribe({
        error() { },
    });
    return {
        id,
        info,
        // This is a getter so that it always returns the next output, and not the same one.
        get result() {
            return output.pipe((0, operators_1.first)()).toPromise();
        },
        output,
        progress: job
            .getChannel('progress', progressSchema)
            .pipe((0, operators_1.shareReplay)(1)),
        stop() {
            job.stop();
            return job.outboundBus
                .pipe((0, operators_1.ignoreElements)(), (0, operators_1.catchError)(() => rxjs_1.EMPTY))
                .toPromise();
        },
    };
}
exports.scheduleByName = scheduleByName;
async function scheduleByTarget(target, overrides, options) {
    return scheduleByName(`{${(0, api_1.targetStringFromTarget)(target)}}`, overrides, {
        ...options,
        target,
        logger: options.logger,
    });
}
exports.scheduleByTarget = scheduleByTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtYnktbmFtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2FyY2hpdGVjdC9zcmMvc2NoZWR1bGUtYnktbmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCwrQ0FBZ0U7QUFDaEUsK0JBQTJDO0FBQzNDLDhDQUFxRjtBQUNyRiwrQkFRZTtBQUNmLGlDQUFxRTtBQUVyRSxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUV6RCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFFWCxLQUFLLFVBQVUsY0FBYyxDQUNsQyxJQUFZLEVBQ1osWUFBNkIsRUFDN0IsT0FPQztJQUVELE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBQSw0QkFBc0IsRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzlGLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFrQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEYsSUFBSSxpQkFBK0IsQ0FBQztJQUVwQyxNQUFNLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDbEQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUV4RCxNQUFNLFdBQVcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDdEQsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQW1CLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsRUFBRSxT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QWMsQ0FBQzthQUM3RCxJQUFJLENBQUMsSUFBQSx1QkFBVyxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUk7WUFDRixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFWCxPQUFPLEdBQUcsQ0FBQyxXQUFXO2lCQUNuQixJQUFJLENBQ0gsSUFBQSwwQkFBYyxHQUFFLEVBQ2hCLElBQUEsc0JBQVUsRUFBQyxHQUFHLEVBQUUsQ0FBQyxZQUFLLENBQUMsQ0FDeEI7aUJBQ0EsU0FBUyxFQUFFLENBQUM7UUFDakIsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBOUdELHdDQThHQztBQUVNLEtBQUssVUFBVSxnQkFBZ0IsQ0FDcEMsTUFBYyxFQUNkLFNBQTBCLEVBQzFCLE9BTUM7SUFFRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLElBQUEsNEJBQXNCLEVBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7UUFDdEUsR0FBRyxPQUFPO1FBQ1YsTUFBTTtRQUNOLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN2QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBaEJELDRDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBhbmFseXRpY3MsIGpzb24sIGxvZ2dpbmcgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBFTVBUWSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBmaXJzdCwgaWdub3JlRWxlbWVudHMsIG1hcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBCdWlsZGVySW5mbyxcbiAgQnVpbGRlcklucHV0LFxuICBCdWlsZGVyT3V0cHV0LFxuICBCdWlsZGVyUHJvZ3Jlc3NSZXBvcnQsXG4gIEJ1aWxkZXJSdW4sXG4gIFRhcmdldCxcbiAgdGFyZ2V0U3RyaW5nRnJvbVRhcmdldCxcbn0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IHsgSm9iT3V0Ym91bmRNZXNzYWdlS2luZCwgSm9iU3RhdGUsIFNjaGVkdWxlciB9IGZyb20gJy4vam9icyc7XG5cbmNvbnN0IHByb2dyZXNzU2NoZW1hID0gcmVxdWlyZSgnLi9wcm9ncmVzcy1zY2hlbWEuanNvbicpO1xuXG5sZXQgX3VuaXF1ZUlkID0gMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNjaGVkdWxlQnlOYW1lKFxuICBuYW1lOiBzdHJpbmcsXG4gIGJ1aWxkT3B0aW9uczoganNvbi5Kc29uT2JqZWN0LFxuICBvcHRpb25zOiB7XG4gICAgdGFyZ2V0PzogVGFyZ2V0O1xuICAgIHNjaGVkdWxlcjogU2NoZWR1bGVyO1xuICAgIGxvZ2dlcjogbG9nZ2luZy5Mb2dnZXJBcGk7XG4gICAgd29ya3NwYWNlUm9vdDogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+O1xuICAgIGN1cnJlbnREaXJlY3Rvcnk6IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPjtcbiAgICBhbmFseXRpY3M/OiBhbmFseXRpY3MuQW5hbHl0aWNzO1xuICB9LFxuKTogUHJvbWlzZTxCdWlsZGVyUnVuPiB7XG4gIGNvbnN0IGNoaWxkTG9nZ2VyTmFtZSA9IG9wdGlvbnMudGFyZ2V0ID8gYHske3RhcmdldFN0cmluZ0Zyb21UYXJnZXQob3B0aW9ucy50YXJnZXQpfX1gIDogbmFtZTtcbiAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIuY3JlYXRlQ2hpbGQoY2hpbGRMb2dnZXJOYW1lKTtcbiAgY29uc3Qgam9iID0gb3B0aW9ucy5zY2hlZHVsZXIuc2NoZWR1bGU8e30sIEJ1aWxkZXJJbnB1dCwgQnVpbGRlck91dHB1dD4obmFtZSwge30pO1xuICBsZXQgc3RhdGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdCB3b3Jrc3BhY2VSb290ID0gYXdhaXQgb3B0aW9ucy53b3Jrc3BhY2VSb290O1xuICBjb25zdCBjdXJyZW50RGlyZWN0b3J5ID0gYXdhaXQgb3B0aW9ucy5jdXJyZW50RGlyZWN0b3J5O1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gYXdhaXQgam9iLmRlc2NyaXB0aW9uLnRvUHJvbWlzZSgpO1xuICBjb25zdCBpbmZvID0gZGVzY3JpcHRpb24uaW5mbyBhcyBCdWlsZGVySW5mbztcbiAgY29uc3QgaWQgPSArK191bmlxdWVJZDtcblxuICBjb25zdCBtZXNzYWdlID0ge1xuICAgIGlkLFxuICAgIGN1cnJlbnREaXJlY3RvcnksXG4gICAgd29ya3NwYWNlUm9vdCxcbiAgICBpbmZvOiBpbmZvLFxuICAgIG9wdGlvbnM6IGJ1aWxkT3B0aW9ucyxcbiAgICAuLi4ob3B0aW9ucy50YXJnZXQgPyB7IHRhcmdldDogb3B0aW9ucy50YXJnZXQgfSA6IHt9KSxcbiAgfTtcblxuICAvLyBXYWl0IGZvciB0aGUgam9iIHRvIGJlIHJlYWR5LlxuICBpZiAoam9iLnN0YXRlICE9PSBKb2JTdGF0ZS5TdGFydGVkKSB7XG4gICAgc3RhdGVTdWJzY3JpcHRpb24gPSBqb2Iub3V0Ym91bmRCdXMuc3Vic2NyaWJlKFxuICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5raW5kID09PSBKb2JPdXRib3VuZE1lc3NhZ2VLaW5kLlN0YXJ0KSB7XG4gICAgICAgICAgam9iLmlucHV0Lm5leHQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoKSA9PiB7fSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGpvYi5pbnB1dC5uZXh0KG1lc3NhZ2UpO1xuICB9XG5cbiAgY29uc3QgbG9nQ2hhbm5lbFN1YiA9IGpvYi5nZXRDaGFubmVsPGxvZ2dpbmcuTG9nRW50cnk+KCdsb2cnKS5zdWJzY3JpYmUoXG4gICAgKGVudHJ5KSA9PiB7XG4gICAgICBsb2dnZXIubmV4dChlbnRyeSk7XG4gICAgfSxcbiAgICAoKSA9PiB7fSxcbiAgKTtcblxuICBjb25zdCBzID0gam9iLm91dGJvdW5kQnVzLnN1YnNjcmliZSh7XG4gICAgZXJyb3IoKSB7fSxcbiAgICBjb21wbGV0ZSgpIHtcbiAgICAgIHMudW5zdWJzY3JpYmUoKTtcbiAgICAgIGxvZ0NoYW5uZWxTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIGlmIChzdGF0ZVN1YnNjcmlwdGlvbikge1xuICAgICAgICBzdGF0ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuICBjb25zdCBvdXRwdXQgPSBqb2Iub3V0cHV0LnBpcGUoXG4gICAgbWFwKFxuICAgICAgKG91dHB1dCkgPT5cbiAgICAgICAgKHtcbiAgICAgICAgICAuLi5vdXRwdXQsXG4gICAgICAgICAgLi4uKG9wdGlvbnMudGFyZ2V0ID8geyB0YXJnZXQ6IG9wdGlvbnMudGFyZ2V0IH0gOiAwKSxcbiAgICAgICAgICBpbmZvLFxuICAgICAgICB9IGFzIHVua25vd24gYXMgQnVpbGRlck91dHB1dCksXG4gICAgKSxcbiAgICBzaGFyZVJlcGxheSgpLFxuICApO1xuXG4gIC8vIElmIHRoZXJlJ3MgYW4gYW5hbHl0aWNzIG9iamVjdCwgdGFrZSB0aGUgam9iIGNoYW5uZWwgYW5kIHJlcG9ydCBpdCB0byB0aGUgYW5hbHl0aWNzLlxuICBpZiAob3B0aW9ucy5hbmFseXRpY3MpIHtcbiAgICBjb25zdCByZXBvcnRlciA9IG5ldyBhbmFseXRpY3MuQW5hbHl0aWNzUmVwb3J0ZXIob3B0aW9ucy5hbmFseXRpY3MpO1xuICAgIGpvYlxuICAgICAgLmdldENoYW5uZWw8YW5hbHl0aWNzLkFuYWx5dGljc1JlcG9ydD4oJ2FuYWx5dGljcycpXG4gICAgICAuc3Vic2NyaWJlKChyZXBvcnQpID0+IHJlcG9ydGVyLnJlcG9ydChyZXBvcnQpKTtcbiAgfVxuICAvLyBTdGFydCB0aGUgYnVpbGRlci5cbiAgb3V0cHV0LnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKHtcbiAgICBlcnJvcigpIHt9LFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIGluZm8sXG4gICAgLy8gVGhpcyBpcyBhIGdldHRlciBzbyB0aGF0IGl0IGFsd2F5cyByZXR1cm5zIHRoZSBuZXh0IG91dHB1dCwgYW5kIG5vdCB0aGUgc2FtZSBvbmUuXG4gICAgZ2V0IHJlc3VsdCgpIHtcbiAgICAgIHJldHVybiBvdXRwdXQucGlwZShmaXJzdCgpKS50b1Byb21pc2UoKTtcbiAgICB9LFxuICAgIG91dHB1dCxcbiAgICBwcm9ncmVzczogam9iXG4gICAgICAuZ2V0Q2hhbm5lbDxCdWlsZGVyUHJvZ3Jlc3NSZXBvcnQ+KCdwcm9ncmVzcycsIHByb2dyZXNzU2NoZW1hKVxuICAgICAgLnBpcGUoc2hhcmVSZXBsYXkoMSkpLFxuICAgIHN0b3AoKSB7XG4gICAgICBqb2Iuc3RvcCgpO1xuXG4gICAgICByZXR1cm4gam9iLm91dGJvdW5kQnVzXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGlnbm9yZUVsZW1lbnRzKCksXG4gICAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiBFTVBUWSksXG4gICAgICAgIClcbiAgICAgICAgLnRvUHJvbWlzZSgpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzY2hlZHVsZUJ5VGFyZ2V0KFxuICB0YXJnZXQ6IFRhcmdldCxcbiAgb3ZlcnJpZGVzOiBqc29uLkpzb25PYmplY3QsXG4gIG9wdGlvbnM6IHtcbiAgICBzY2hlZHVsZXI6IFNjaGVkdWxlcjtcbiAgICBsb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyQXBpO1xuICAgIHdvcmtzcGFjZVJvb3Q6IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPjtcbiAgICBjdXJyZW50RGlyZWN0b3J5OiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz47XG4gICAgYW5hbHl0aWNzPzogYW5hbHl0aWNzLkFuYWx5dGljcztcbiAgfSxcbik6IFByb21pc2U8QnVpbGRlclJ1bj4ge1xuICByZXR1cm4gc2NoZWR1bGVCeU5hbWUoYHske3RhcmdldFN0cmluZ0Zyb21UYXJnZXQodGFyZ2V0KX19YCwgb3ZlcnJpZGVzLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICB0YXJnZXQsXG4gICAgbG9nZ2VyOiBvcHRpb25zLmxvZ2dlcixcbiAgfSk7XG59XG4iXX0=